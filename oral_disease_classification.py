# -*- coding: utf-8 -*-
"""Oral Disease Classification

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bjx31XjQAYwVeopdR45MrjXwvO0PFbKz
"""

import os
import numpy as np
import cv2
from PIL import Image
import random
from sklearn.metrics import confusion_matrix, classification_report
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Model, Sequential, load_model
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout, GlobalAveragePooling2D
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
from google.colab import drive
from mlxtend.plotting import plot_confusion_matrix

drive.mount('/content/drive')

TRAIN_DIR = "/content/drive/MyDrive/Dataset/TRAIN"
TEST_DIR = "/content/drive/MyDrive/Dataset/TEST"


if not os.path.exists(TRAIN_DIR):
    raise FileNotFoundError(f"TRAIN directory not found: {TRAIN_DIR}")
if not os.path.exists(TEST_DIR):
    raise FileNotFoundError(f"TEST directory not found: {TEST_DIR}")


CATEGORIES = os.listdir(TRAIN_DIR)

def load_images_from_folder(folder, label):
    images = []
    labels = []
    for filename in os.listdir(folder):
        try:
            filepath = os.path.join(folder, filename)
            image = cv2.imread(filepath)
            image = cv2.resize(image, (224, 224))
            images.append(np.array(image))
            labels.append(label)
        except Exception as e:
            print(f"Error loading image {filename}: {e}")
    return images, labels

data = []
labels = []

for category in CATEGORIES:
    path = os.path.join(TRAIN_DIR, category)
    class_label = CATEGORIES.index(category)
    images, lbls = load_images_from_folder(path, class_label)
    data.extend(images)
    labels.extend(lbls)

for category in CATEGORIES:
    path = os.path.join(TEST_DIR, category)
    class_label = CATEGORIES.index(category)
    images, lbls = load_images_from_folder(path, class_label)
    data.extend(images)
    labels.extend(lbls)

data = np.array(data)
labels = np.array(labels)

# Shuffle the dataset
indices = np.arange(len(data))
np.random.shuffle(indices)
data = data[indices]
labels = labels[indices]

data = data.astype('float32') / 255.0

num_classes = len(CATEGORIES)
labels = to_categorical(labels, num_classes)

split = int(0.8 * len(data))
x_train, x_test = data[:split], data[split:]
y_train, y_test = labels[:split], labels[split:]

base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
for layer in base_model.layers:
    layer.trainable = True

x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(512, activation='relu')(x)
x = Dropout(0.3)(x)
x = Dense(128, activation='relu')(x)
predictions = Dense(num_classes, activation='softmax')(x)

model = Model(inputs=base_model.input, outputs=predictions)

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

checkpoint = ModelCheckpoint('oral_disease_model.keras', monitor='val_accuracy', save_best_only=True, verbose=1, mode='max')
reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3, verbose=1, min_lr=1e-6)
callbacks = [checkpoint, reduce_lr]

history = model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=20, batch_size=32, callbacks=callbacks)

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs_range = range(len(acc))

plt.figure(figsize=(15, 5))
plt.subplot(1, 2, 1)
plt.plot(epochs_range, acc, label='Training Accuracy')
plt.plot(epochs_range, val_acc, label='Validation Accuracy')
plt.legend(loc='best')
plt.title('Model Accuracy')

plt.subplot(1, 2, 2)
plt.plot(epochs_range, loss, label='Training Loss')
plt.plot(epochs_range, val_loss, label='Validation Loss')
plt.legend(loc='best')
plt.title('Model Loss')

plt.show()

score = model.evaluate(x_test, y_test)
print(f"Test Accuracy: {score[1]}")

CATEGORIES = list(set(os.listdir(TRAIN_DIR) + os.listdir(TEST_DIR)))

y_pred = np.argmax(model.predict(x_test), axis=1)
y_true = np.argmax(y_test, axis=1)
conf_matrix = confusion_matrix(y_true, y_pred)

num_classes = len(CATEGORIES)
if conf_matrix.shape[0] != num_classes or conf_matrix.shape[1] != num_classes:

    new_conf_matrix = np.zeros((num_classes, num_classes), dtype=int)
    new_conf_matrix[:conf_matrix.shape[0], :conf_matrix.shape[1]] = conf_matrix
    conf_matrix = new_conf_matrix

fig, ax = plot_confusion_matrix(conf_mat=conf_matrix, class_names=CATEGORIES, figsize=(5, 5))
plt.show()

CATEGORIES = sorted(os.listdir(TRAIN_DIR))

unique_labels = np.unique(y_true)
num_classes = len(unique_labels)

target_names = [CATEGORIES[i] for i in unique_labels]

print("Classification Report:")
print(classification_report(y_true, y_pred, target_names=target_names))

model.save('/content/drive/MyDrive/oral_disease_model_final.keras')